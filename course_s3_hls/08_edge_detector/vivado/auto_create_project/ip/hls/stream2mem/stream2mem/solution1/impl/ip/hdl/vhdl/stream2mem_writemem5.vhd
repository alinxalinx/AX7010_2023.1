-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream2mem_writemem5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    pMemPort_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    pMemPort_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    pMemPort_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    pMemPort_empty_n : IN STD_LOGIC;
    pMemPort_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    cacheBuff_i_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    cacheBuff_i_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    cacheBuff_i_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    cacheBuff_i_empty_n : IN STD_LOGIC;
    cacheBuff_i_read : OUT STD_LOGIC;
    img_cols_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_cols_empty_n : IN STD_LOGIC;
    img_cols_read : OUT STD_LOGIC );
end;


architecture behav of stream2mem_writemem5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln6_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal pMemPort_blk_n : STD_LOGIC;
    signal img_cols_blk_n : STD_LOGIC;
    signal pMemPort_1_reg_239 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal img_cols_read_reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln8_fu_181_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln8_reg_250 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln6_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_i_reg_260 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_fu_222_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_reg_266 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_ap_start : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_ap_done : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_ap_idle : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_ap_ready : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_cacheBuff_i_read : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_writemem5_Pipeline_1_fu_95_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_cast_cast_i_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_cast_i_cast_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal tmp_fu_105_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln19_2_fu_112_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln18_fu_120_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln19_fu_116_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln18_fu_123_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln19_fu_127_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln19_1_fu_141_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln19_1_fu_147_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln19_fu_157_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln19_2_fu_167_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_133_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln19_2_fu_161_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln19_1_fu_177_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln8_fu_195_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln8_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln8_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stream2mem_writemem5_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cacheBuff_i_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        cacheBuff_i_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        cacheBuff_i_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        cacheBuff_i_empty_n : IN STD_LOGIC;
        cacheBuff_i_read : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_cast_cast_i : IN STD_LOGIC_VECTOR (61 downto 0);
        zext_ln8_1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    grp_writemem5_Pipeline_1_fu_95 : component stream2mem_writemem5_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_writemem5_Pipeline_1_fu_95_ap_start,
        ap_done => grp_writemem5_Pipeline_1_fu_95_ap_done,
        ap_idle => grp_writemem5_Pipeline_1_fu_95_ap_idle,
        ap_ready => grp_writemem5_Pipeline_1_fu_95_ap_ready,
        cacheBuff_i_dout => cacheBuff_i_dout,
        cacheBuff_i_num_data_valid => ap_const_lv10_0,
        cacheBuff_i_fifo_cap => ap_const_lv10_0,
        cacheBuff_i_empty_n => cacheBuff_i_empty_n,
        cacheBuff_i_read => grp_writemem5_Pipeline_1_fu_95_cacheBuff_i_read,
        m_axi_gmem_AWVALID => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        p_cast_cast_i => p_cast_i_reg_260,
        zext_ln8_1 => empty_reg_266);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln6_reg_256 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_writemem5_Pipeline_1_fu_95_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_writemem5_Pipeline_1_fu_95_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_writemem5_Pipeline_1_fu_95_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_writemem5_Pipeline_1_fu_95_ap_ready = ap_const_logic_1)) then 
                    grp_writemem5_Pipeline_1_fu_95_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                empty_reg_266 <= empty_fu_222_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln6_reg_256 <= icmp_ln6_fu_189_p2;
                select_ln8_reg_250 <= select_ln8_fu_181_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((pMemPort_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (img_cols_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                img_cols_read_reg_244 <= img_cols_dout;
                pMemPort_1_reg_239 <= pMemPort_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_189_p2 = ap_const_lv1_1))) then
                p_cast_i_reg_260 <= add_ln8_fu_207_p2(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_BVALID, pMemPort_empty_n, img_cols_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state10, icmp_ln6_reg_256, ap_CS_fsm_state2, icmp_ln6_fu_189_p2, grp_writemem5_Pipeline_1_fu_95_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((pMemPort_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (img_cols_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_189_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_writemem5_Pipeline_1_fu_95_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln6_reg_256 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln8_fu_207_p2 <= std_logic_vector(unsigned(pMemPort_1_reg_239) + unsigned(zext_ln8_fu_203_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_gmem_BVALID, icmp_ln6_reg_256)
    begin
        if (((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln6_reg_256 = ap_const_lv1_1))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, pMemPort_empty_n, img_cols_empty_n)
    begin
        if (((pMemPort_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (img_cols_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_ap_done)
    begin
        if ((grp_writemem5_Pipeline_1_fu_95_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, pMemPort_empty_n, img_cols_empty_n)
    begin
                ap_block_state1 <= ((pMemPort_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (img_cols_empty_n = ap_const_logic_0));
    end process;


    ap_block_state10_assign_proc : process(m_axi_gmem_BVALID, icmp_ln6_reg_256)
    begin
                ap_block_state10 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln6_reg_256 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem_BVALID, ap_CS_fsm_state10, icmp_ln6_reg_256)
    begin
        if ((not(((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln6_reg_256 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state10, icmp_ln6_reg_256)
    begin
        if ((not(((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln6_reg_256 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cacheBuff_i_read_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_cacheBuff_i_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cacheBuff_i_read <= grp_writemem5_Pipeline_1_fu_95_cacheBuff_i_read;
        else 
            cacheBuff_i_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_222_p1 <= select_ln8_reg_250(12 - 1 downto 0);

    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state10, icmp_ln6_reg_256)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln6_reg_256 = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    grp_writemem5_Pipeline_1_fu_95_ap_start <= grp_writemem5_Pipeline_1_fu_95_ap_start_reg;
    icmp_ln6_fu_189_p2 <= "1" when (signed(select_ln8_fu_181_p3) > signed(ap_const_lv13_0)) else "0";

    img_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_blk_n <= img_cols_empty_n;
        else 
            img_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, pMemPort_empty_n, img_cols_empty_n)
    begin
        if ((not(((pMemPort_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (img_cols_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_read <= ap_const_logic_1;
        else 
            img_cols_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;

    m_axi_gmem_AWADDR_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state3, grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWADDR, ap_CS_fsm_state4, ap_CS_fsm_state5, p_cast_cast_i_fu_225_p1)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_AWADDR <= p_cast_cast_i_fu_225_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWADDR <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWADDR;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_AWBURST_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWBURST, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWBURST <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWBURST;
        else 
            m_axi_gmem_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_AWCACHE_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWCACHE, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWCACHE <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWCACHE;
        else 
            m_axi_gmem_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_AWID_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWID <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWID;
        else 
            m_axi_gmem_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_AWLEN_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state3, grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLEN, ap_CS_fsm_state4, ap_CS_fsm_state5, trunc_ln8_cast_i_cast_fu_235_p1)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_AWLEN <= trunc_ln8_cast_i_cast_fu_235_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWLEN <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLEN;
        else 
            m_axi_gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_AWLOCK_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLOCK, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWLOCK <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLOCK;
        else 
            m_axi_gmem_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_AWPROT_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWPROT, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWPROT <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWPROT;
        else 
            m_axi_gmem_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_AWQOS_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWQOS, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWQOS <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWQOS;
        else 
            m_axi_gmem_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_AWREGION_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWREGION, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWREGION <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWREGION;
        else 
            m_axi_gmem_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_AWSIZE_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWSIZE, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWSIZE <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWSIZE;
        else 
            m_axi_gmem_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_AWUSER_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWUSER, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWUSER <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWUSER;
        else 
            m_axi_gmem_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state3, grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWVALID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_AWVALID <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWVALID;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state10, icmp_ln6_reg_256, grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_BREADY, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((not(((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln6_reg_256 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln6_reg_256 = ap_const_lv1_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_BREADY <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_BREADY;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WUSER;

    m_axi_gmem_WVALID_assign_proc : process(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WVALID, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_WVALID <= grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WVALID;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    pMemPort_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, pMemPort_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pMemPort_blk_n <= pMemPort_empty_n;
        else 
            pMemPort_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pMemPort_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, pMemPort_empty_n, img_cols_empty_n)
    begin
        if ((not(((pMemPort_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (img_cols_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pMemPort_read <= ap_const_logic_1;
        else 
            pMemPort_read <= ap_const_logic_0;
        end if; 
    end process;

        p_cast_cast_i_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_i_reg_260),64));

    select_ln8_fu_181_p3 <= 
        sub_ln19_2_fu_161_p2 when (tmp_1_fu_133_p3(0) = '1') else 
        sext_ln19_1_fu_177_p1;
        sext_ln18_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(img_cols_read_reg_244),11));

        sext_ln19_1_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_2_fu_167_p4),13));

        sext_ln19_2_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_105_p3),13));

        sext_ln19_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_1_fu_147_p4),13));

    shl_ln8_fu_195_p3 <= (p_read & ap_const_lv2_0);
    sub_ln19_1_fu_141_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(sub_ln19_fu_127_p2));
    sub_ln19_2_fu_161_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(sext_ln19_fu_157_p1));
    sub_ln19_fu_127_p2 <= std_logic_vector(unsigned(zext_ln19_fu_116_p1) - unsigned(zext_ln18_fu_123_p1));
    tmp_1_fu_133_p3 <= sub_ln19_fu_127_p2(13 downto 13);
    tmp_fu_105_p3 <= (img_cols_read_reg_244 & ap_const_lv2_0);
    trunc_ln19_1_fu_147_p4 <= sub_ln19_1_fu_141_p2(13 downto 2);
    trunc_ln19_2_fu_167_p4 <= sub_ln19_fu_127_p2(13 downto 2);
    trunc_ln8_cast_i_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln8_reg_250),32));
    zext_ln18_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_fu_120_p1),14));
    zext_ln19_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_2_fu_112_p1),14));
    zext_ln8_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_195_p3),64));
end behav;

-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1 is
port (
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    img_data_empty_n : IN STD_LOGIC;
    img_data_read : OUT STD_LOGIC;
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_we0 : OUT STD_LOGIC;
    r : IN STD_LOGIC_VECTOR (31 downto 0);
    row : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    pMemPort : IN STD_LOGIC_VECTOR (63 downto 0);
    index : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    pMemPort_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    r_ap_vld : IN STD_LOGIC;
    row_ap_vld : IN STD_LOGIC;
    index_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_pMemPort_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_pMemPort_c_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_cacheBuff_i_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_cacheBuff_i_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_img_data_read : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_baseAddr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_baseAddr_ce0 : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_img_cols_c_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_img_cols_c_write : STD_LOGIC;
    signal dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_loc_i_channel_full_n : STD_LOGIC;
    signal writemem5_U0_ap_start : STD_LOGIC;
    signal writemem5_U0_ap_done : STD_LOGIC;
    signal writemem5_U0_ap_continue : STD_LOGIC;
    signal writemem5_U0_ap_idle : STD_LOGIC;
    signal writemem5_U0_ap_ready : STD_LOGIC;
    signal writemem5_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal writemem5_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writemem5_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem5_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writemem5_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writemem5_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem5_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem5_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem5_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writemem5_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem5_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem5_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem5_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal writemem5_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal writemem5_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem5_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal writemem5_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem5_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem5_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal writemem5_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writemem5_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem5_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writemem5_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writemem5_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem5_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writemem5_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem5_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writemem5_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem5_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writemem5_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writemem5_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal writemem5_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal writemem5_U0_pMemPort_read : STD_LOGIC;
    signal writemem5_U0_cacheBuff_i_read : STD_LOGIC;
    signal writemem5_U0_img_cols_read : STD_LOGIC;
    signal pMemPort_c_full_n : STD_LOGIC;
    signal pMemPort_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal pMemPort_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal pMemPort_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal pMemPort_c_empty_n : STD_LOGIC;
    signal cacheBuff_full_n : STD_LOGIC;
    signal cacheBuff_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal cacheBuff_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal cacheBuff_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal cacheBuff_empty_n : STD_LOGIC;
    signal img_cols_c_full_n : STD_LOGIC;
    signal img_cols_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_cols_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal img_cols_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal img_cols_c_empty_n : STD_LOGIC;
    signal add_ln40_loc_i_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_loc_i_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln40_loc_i_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln40_loc_i_channel_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stream2mem_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pMemPort : IN STD_LOGIC_VECTOR (63 downto 0);
        pMemPort_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        pMemPort_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        pMemPort_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        pMemPort_c_full_n : IN STD_LOGIC;
        pMemPort_c_write : OUT STD_LOGIC );
    end component;


    component stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cacheBuff_i_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        cacheBuff_i_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        cacheBuff_i_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        cacheBuff_i_full_n : IN STD_LOGIC;
        cacheBuff_i_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        img_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_data_empty_n : IN STD_LOGIC;
        img_data_read : OUT STD_LOGIC );
    end component;


    component stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r : IN STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        baseAddr_ce0 : OUT STD_LOGIC;
        baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        row : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        img_cols_c_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_cols_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_cols_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_cols_c_full_n : IN STD_LOGIC;
        img_cols_c_write : OUT STD_LOGIC;
        index : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stream2mem_writemem5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        pMemPort_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        pMemPort_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        pMemPort_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        pMemPort_empty_n : IN STD_LOGIC;
        pMemPort_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        cacheBuff_i_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        cacheBuff_i_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        cacheBuff_i_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        cacheBuff_i_empty_n : IN STD_LOGIC;
        cacheBuff_i_read : OUT STD_LOGIC;
        img_cols_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        img_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        img_cols_empty_n : IN STD_LOGIC;
        img_cols_read : OUT STD_LOGIC );
    end component;


    component stream2mem_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component stream2mem_fifo_w8_d480_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component stream2mem_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component stream2mem_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component stream2mem_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        pMemPort => pMemPort,
        pMemPort_c_din => entry_proc_U0_pMemPort_c_din,
        pMemPort_c_num_data_valid => pMemPort_c_num_data_valid,
        pMemPort_c_fifo_cap => pMemPort_c_fifo_cap,
        pMemPort_c_full_n => pMemPort_c_full_n,
        pMemPort_c_write => entry_proc_U0_pMemPort_c_write);

    dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0 : component stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_start,
        ap_done => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_done,
        ap_continue => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_continue,
        ap_idle => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_idle,
        ap_ready => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready,
        cacheBuff_i_din => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_cacheBuff_i_din,
        cacheBuff_i_num_data_valid => cacheBuff_num_data_valid,
        cacheBuff_i_fifo_cap => cacheBuff_fifo_cap,
        cacheBuff_i_full_n => cacheBuff_full_n,
        cacheBuff_i_write => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_cacheBuff_i_write,
        p_read => p_read,
        img_data_dout => img_data_dout,
        img_data_num_data_valid => ap_const_lv2_0,
        img_data_fifo_cap => ap_const_lv2_0,
        img_data_empty_n => img_data_empty_n,
        img_data_read => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_img_data_read);

    dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0 : component stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_start,
        ap_done => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_done,
        ap_continue => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_continue,
        ap_idle => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_idle,
        ap_ready => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready,
        r => r,
        baseAddr_address0 => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_baseAddr_address0,
        baseAddr_ce0 => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_baseAddr_ce0,
        baseAddr_q0 => baseAddr_q0,
        row => row,
        p_read => p_read,
        img_cols_c_din => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_img_cols_c_din,
        img_cols_c_num_data_valid => img_cols_c_num_data_valid,
        img_cols_c_fifo_cap => img_cols_c_fifo_cap,
        img_cols_c_full_n => img_cols_c_full_n,
        img_cols_c_write => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_img_cols_c_write,
        index => index,
        ap_return => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_return);

    writemem5_U0 : component stream2mem_writemem5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writemem5_U0_ap_start,
        ap_done => writemem5_U0_ap_done,
        ap_continue => writemem5_U0_ap_continue,
        ap_idle => writemem5_U0_ap_idle,
        ap_ready => writemem5_U0_ap_ready,
        m_axi_gmem_AWVALID => writemem5_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => writemem5_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => writemem5_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => writemem5_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => writemem5_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => writemem5_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => writemem5_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => writemem5_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => writemem5_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => writemem5_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => writemem5_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => writemem5_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => writemem5_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => writemem5_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => writemem5_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => writemem5_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => writemem5_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => writemem5_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => writemem5_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => writemem5_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => writemem5_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => writemem5_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => writemem5_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => writemem5_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => writemem5_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => writemem5_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => writemem5_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => writemem5_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => writemem5_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => writemem5_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => writemem5_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => writemem5_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        pMemPort_dout => pMemPort_c_dout,
        pMemPort_num_data_valid => pMemPort_c_num_data_valid,
        pMemPort_fifo_cap => pMemPort_c_fifo_cap,
        pMemPort_empty_n => pMemPort_c_empty_n,
        pMemPort_read => writemem5_U0_pMemPort_read,
        p_read => add_ln40_loc_i_channel_dout,
        cacheBuff_i_dout => cacheBuff_dout,
        cacheBuff_i_num_data_valid => cacheBuff_num_data_valid,
        cacheBuff_i_fifo_cap => cacheBuff_fifo_cap,
        cacheBuff_i_empty_n => cacheBuff_empty_n,
        cacheBuff_i_read => writemem5_U0_cacheBuff_i_read,
        img_cols_dout => img_cols_c_dout,
        img_cols_num_data_valid => img_cols_c_num_data_valid,
        img_cols_fifo_cap => img_cols_c_fifo_cap,
        img_cols_empty_n => img_cols_c_empty_n,
        img_cols_read => writemem5_U0_img_cols_read);

    pMemPort_c_U : component stream2mem_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_pMemPort_c_din,
        if_full_n => pMemPort_c_full_n,
        if_write => entry_proc_U0_pMemPort_c_write,
        if_dout => pMemPort_c_dout,
        if_num_data_valid => pMemPort_c_num_data_valid,
        if_fifo_cap => pMemPort_c_fifo_cap,
        if_empty_n => pMemPort_c_empty_n,
        if_read => writemem5_U0_pMemPort_read);

    cacheBuff_U : component stream2mem_fifo_w8_d480_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_cacheBuff_i_din,
        if_full_n => cacheBuff_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_cacheBuff_i_write,
        if_dout => cacheBuff_dout,
        if_num_data_valid => cacheBuff_num_data_valid,
        if_fifo_cap => cacheBuff_fifo_cap,
        if_empty_n => cacheBuff_empty_n,
        if_read => writemem5_U0_cacheBuff_i_read);

    img_cols_c_U : component stream2mem_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_img_cols_c_din,
        if_full_n => img_cols_c_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_img_cols_c_write,
        if_dout => img_cols_c_dout,
        if_num_data_valid => img_cols_c_num_data_valid,
        if_fifo_cap => img_cols_c_fifo_cap,
        if_empty_n => img_cols_c_empty_n,
        if_read => writemem5_U0_img_cols_read);

    add_ln40_loc_i_channel_U : component stream2mem_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_return,
        if_full_n => add_ln40_loc_i_channel_full_n,
        if_write => dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_done,
        if_dout => add_ln40_loc_i_channel_dout,
        if_num_data_valid => add_ln40_loc_i_channel_num_data_valid,
        if_fifo_cap => add_ln40_loc_i_channel_fifo_cap,
        if_empty_n => add_ln40_loc_i_channel_empty_n,
        if_read => writemem5_U0_ap_ready);





    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready <= ap_sync_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready <= ap_sync_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= writemem5_U0_ap_done;
    ap_idle <= (writemem5_U0_ap_idle and (ap_const_logic_1 xor add_ln40_loc_i_channel_empty_n) and entry_proc_U0_ap_idle and dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_idle and dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready <= (dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready or ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready);
    ap_sync_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready <= (dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready or ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready and ap_sync_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready);
    baseAddr_address0 <= dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_baseAddr_address0;
    baseAddr_ce0 <= dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_baseAddr_ce0;
    baseAddr_d0 <= ap_const_lv32_0;
    baseAddr_we0 <= ap_const_logic_0;
    dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_continue <= add_ln40_loc_i_channel_full_n;
    dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_start <= ((ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4_U0_ap_ready xor ap_const_logic_1) and ap_start);
    dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_start <= ((ap_sync_reg_dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_ap_ready xor ap_const_logic_1) and ap_start);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    img_data_read <= dataflow_in_loop_VITIS_LOOP_25_1_1_Loop_VITIS_LOOP_29_2_proc13_U0_img_data_read;
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= writemem5_U0_m_axi_gmem_AWADDR;
    m_axi_gmem_AWBURST <= writemem5_U0_m_axi_gmem_AWBURST;
    m_axi_gmem_AWCACHE <= writemem5_U0_m_axi_gmem_AWCACHE;
    m_axi_gmem_AWID <= writemem5_U0_m_axi_gmem_AWID;
    m_axi_gmem_AWLEN <= writemem5_U0_m_axi_gmem_AWLEN;
    m_axi_gmem_AWLOCK <= writemem5_U0_m_axi_gmem_AWLOCK;
    m_axi_gmem_AWPROT <= writemem5_U0_m_axi_gmem_AWPROT;
    m_axi_gmem_AWQOS <= writemem5_U0_m_axi_gmem_AWQOS;
    m_axi_gmem_AWREGION <= writemem5_U0_m_axi_gmem_AWREGION;
    m_axi_gmem_AWSIZE <= writemem5_U0_m_axi_gmem_AWSIZE;
    m_axi_gmem_AWUSER <= writemem5_U0_m_axi_gmem_AWUSER;
    m_axi_gmem_AWVALID <= writemem5_U0_m_axi_gmem_AWVALID;
    m_axi_gmem_BREADY <= writemem5_U0_m_axi_gmem_BREADY;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= writemem5_U0_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= writemem5_U0_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= writemem5_U0_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= writemem5_U0_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= writemem5_U0_m_axi_gmem_WUSER;
    m_axi_gmem_WVALID <= writemem5_U0_m_axi_gmem_WVALID;
    writemem5_U0_ap_continue <= ap_continue;
    writemem5_U0_ap_start <= add_ln40_loc_i_channel_empty_n;
end behav;

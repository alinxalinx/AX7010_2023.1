// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r,
        baseAddr_address0,
        baseAddr_ce0,
        baseAddr_q0,
        row,
        p_read,
        img_cols_c_din,
        img_cols_c_num_data_valid,
        img_cols_c_fifo_cap,
        img_cols_c_full_n,
        img_cols_c_write,
        index,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] r;
output  [1:0] baseAddr_address0;
output   baseAddr_ce0;
input  [31:0] baseAddr_q0;
input  [10:0] row;
input  [7:0] p_read;
output  [7:0] img_cols_c_din;
input  [1:0] img_cols_c_num_data_valid;
input  [1:0] img_cols_c_fifo_cap;
input   img_cols_c_full_n;
output   img_cols_c_write;
input  [31:0] index;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg baseAddr_ce0;
reg img_cols_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_cols_c_blk_n;
wire   [30:0] select_ln19_fu_203_p3;
reg  signed [30:0] select_ln19_reg_300;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] mul_ln40_fu_113_p2;
reg   [31:0] mul_ln40_reg_310;
wire   [63:0] zext_ln40_fu_267_p1;
wire   [10:0] mul_ln40_fu_113_p1;
wire  signed [7:0] tmp_2_fu_117_p1;
wire   [9:0] tmp_2_fu_117_p3;
wire  signed [12:0] sext_ln19_fu_125_p1;
wire  signed [7:0] sext_ln18_fu_133_p0;
wire  signed [10:0] sext_ln18_fu_133_p1;
wire   [13:0] zext_ln19_fu_129_p1;
wire   [13:0] zext_ln18_fu_137_p1;
wire   [13:0] sub_ln19_fu_141_p2;
wire   [13:0] sub_ln19_1_fu_155_p2;
wire   [11:0] trunc_ln19_3_fu_161_p4;
wire  signed [29:0] sext_ln19_3_fu_171_p1;
wire   [30:0] zext_ln19_1_fu_175_p1;
wire   [11:0] trunc_ln19_4_fu_185_p4;
wire  signed [29:0] sext_ln19_4_fu_195_p1;
wire   [0:0] tmp_3_fu_147_p3;
wire   [30:0] sub_ln19_2_fu_179_p2;
wire   [30:0] zext_ln19_2_fu_199_p1;
wire   [30:0] tmp_fu_215_p4;
wire   [0:0] icmp_ln21_fu_225_p2;
wire   [31:0] add_ln21_fu_231_p2;
wire   [31:0] select_ln21_fu_237_p3;
wire   [0:0] icmp_ln22_fu_245_p2;
wire   [1:0] trunc_ln22_fu_251_p1;
wire   [1:0] trunc_ln22_1_fu_255_p1;
wire   [1:0] select_ln22_fu_259_p3;
wire    ap_CS_fsm_state3;
wire   [29:0] trunc_ln1_fu_281_p4;
wire  signed [31:0] sext_ln40_fu_291_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire   [31:0] mul_ln40_fu_113_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

stream2mem_mul_31s_11ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 32 ))
mul_31s_11ns_32_1_1_U57(
    .din0(select_ln19_reg_300),
    .din1(mul_ln40_fu_113_p1),
    .dout(mul_ln40_fu_113_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln40_reg_310 <= mul_ln40_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_cols_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        select_ln19_reg_300 <= select_ln19_fu_203_p3;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (img_cols_c_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        baseAddr_ce0 = 1'b1;
    end else begin
        baseAddr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_c_blk_n = img_cols_c_full_n;
    end else begin
        img_cols_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_cols_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_c_write = 1'b1;
    end else begin
        img_cols_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (img_cols_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_231_p2 = (index + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_cols_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return = ($signed(mul_ln40_reg_310) + $signed(sext_ln40_fu_291_p1));

assign baseAddr_address0 = zext_ln40_fu_267_p1;

assign icmp_ln21_fu_225_p2 = (($signed(tmp_fu_215_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_245_p2 = ((select_ln21_fu_237_p3 == r) ? 1'b1 : 1'b0);

assign img_cols_c_din = p_read;

assign mul_ln40_fu_113_p1 = mul_ln40_fu_113_p10;

assign mul_ln40_fu_113_p10 = row;

assign select_ln19_fu_203_p3 = ((tmp_3_fu_147_p3[0:0] == 1'b1) ? sub_ln19_2_fu_179_p2 : zext_ln19_2_fu_199_p1);

assign select_ln21_fu_237_p3 = ((icmp_ln21_fu_225_p2[0:0] == 1'b1) ? add_ln21_fu_231_p2 : 32'd0);

assign select_ln22_fu_259_p3 = ((icmp_ln22_fu_245_p2[0:0] == 1'b1) ? trunc_ln22_fu_251_p1 : trunc_ln22_1_fu_255_p1);

assign sext_ln18_fu_133_p0 = p_read;

assign sext_ln18_fu_133_p1 = sext_ln18_fu_133_p0;

assign sext_ln19_3_fu_171_p1 = $signed(trunc_ln19_3_fu_161_p4);

assign sext_ln19_4_fu_195_p1 = $signed(trunc_ln19_4_fu_185_p4);

assign sext_ln19_fu_125_p1 = $signed(tmp_2_fu_117_p3);

assign sext_ln40_fu_291_p1 = $signed(trunc_ln1_fu_281_p4);

assign sub_ln19_1_fu_155_p2 = (14'd0 - sub_ln19_fu_141_p2);

assign sub_ln19_2_fu_179_p2 = (31'd0 - zext_ln19_1_fu_175_p1);

assign sub_ln19_fu_141_p2 = (zext_ln19_fu_129_p1 - zext_ln18_fu_137_p1);

assign tmp_2_fu_117_p1 = p_read;

assign tmp_2_fu_117_p3 = {{tmp_2_fu_117_p1}, {2'd0}};

assign tmp_3_fu_147_p3 = sub_ln19_fu_141_p2[32'd13];

assign tmp_fu_215_p4 = {{index[31:1]}};

assign trunc_ln19_3_fu_161_p4 = {{sub_ln19_1_fu_155_p2[13:2]}};

assign trunc_ln19_4_fu_185_p4 = {{sub_ln19_fu_141_p2[13:2]}};

assign trunc_ln1_fu_281_p4 = {{baseAddr_q0[31:2]}};

assign trunc_ln22_1_fu_255_p1 = select_ln21_fu_237_p3[1:0];

assign trunc_ln22_fu_251_p1 = index[1:0];

assign zext_ln18_fu_137_p1 = $unsigned(sext_ln18_fu_133_p1);

assign zext_ln19_1_fu_175_p1 = $unsigned(sext_ln19_3_fu_171_p1);

assign zext_ln19_2_fu_199_p1 = $unsigned(sext_ln19_4_fu_195_p1);

assign zext_ln19_fu_129_p1 = $unsigned(sext_ln19_fu_125_p1);

assign zext_ln40_fu_267_p1 = select_ln22_fu_259_p3;

endmodule //stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4

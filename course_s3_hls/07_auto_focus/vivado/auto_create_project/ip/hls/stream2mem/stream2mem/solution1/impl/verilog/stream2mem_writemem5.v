// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module stream2mem_writemem5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        pMemPort_dout,
        pMemPort_num_data_valid,
        pMemPort_fifo_cap,
        pMemPort_empty_n,
        pMemPort_read,
        p_read,
        cacheBuff_i_dout,
        cacheBuff_i_num_data_valid,
        cacheBuff_i_fifo_cap,
        cacheBuff_i_empty_n,
        cacheBuff_i_read,
        img_cols_dout,
        img_cols_num_data_valid,
        img_cols_fifo_cap,
        img_cols_empty_n,
        img_cols_read
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] pMemPort_dout;
input  [2:0] pMemPort_num_data_valid;
input  [2:0] pMemPort_fifo_cap;
input   pMemPort_empty_n;
output   pMemPort_read;
input  [31:0] p_read;
input  [7:0] cacheBuff_i_dout;
input  [9:0] cacheBuff_i_num_data_valid;
input  [9:0] cacheBuff_i_fifo_cap;
input   cacheBuff_i_empty_n;
output   cacheBuff_i_read;
input  [7:0] img_cols_dout;
input  [1:0] img_cols_num_data_valid;
input  [1:0] img_cols_fifo_cap;
input   img_cols_empty_n;
output   img_cols_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg[0:0] m_axi_gmem_AWID;
reg[31:0] m_axi_gmem_AWLEN;
reg[2:0] m_axi_gmem_AWSIZE;
reg[1:0] m_axi_gmem_AWBURST;
reg[1:0] m_axi_gmem_AWLOCK;
reg[3:0] m_axi_gmem_AWCACHE;
reg[2:0] m_axi_gmem_AWPROT;
reg[3:0] m_axi_gmem_AWQOS;
reg[3:0] m_axi_gmem_AWREGION;
reg[0:0] m_axi_gmem_AWUSER;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_BREADY;
reg pMemPort_read;
reg cacheBuff_i_read;
reg img_cols_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state10;
reg   [0:0] icmp_ln6_reg_256;
reg    pMemPort_blk_n;
reg    img_cols_blk_n;
reg   [63:0] pMemPort_1_reg_239;
reg    ap_block_state1;
reg  signed [7:0] img_cols_read_reg_244;
wire   [12:0] select_ln8_fu_181_p3;
reg   [12:0] select_ln8_reg_250;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6_fu_189_p2;
reg   [61:0] p_cast_i_reg_260;
wire   [11:0] empty_fu_222_p1;
reg   [11:0] empty_reg_266;
wire    grp_writemem5_Pipeline_1_fu_95_ap_start;
wire    grp_writemem5_Pipeline_1_fu_95_ap_done;
wire    grp_writemem5_Pipeline_1_fu_95_ap_idle;
wire    grp_writemem5_Pipeline_1_fu_95_ap_ready;
wire    grp_writemem5_Pipeline_1_fu_95_cacheBuff_i_read;
wire    grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWVALID;
wire   [63:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWADDR;
wire   [0:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWID;
wire   [31:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLEN;
wire   [2:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWSIZE;
wire   [1:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWBURST;
wire   [1:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLOCK;
wire   [3:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWCACHE;
wire   [2:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWPROT;
wire   [3:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWQOS;
wire   [3:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWREGION;
wire   [0:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWUSER;
wire    grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WVALID;
wire   [31:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WDATA;
wire   [3:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WSTRB;
wire    grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WLAST;
wire   [0:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WID;
wire   [0:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WUSER;
wire    grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARVALID;
wire   [63:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARADDR;
wire   [0:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARID;
wire   [31:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARLEN;
wire   [2:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARSIZE;
wire   [1:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARBURST;
wire   [1:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARLOCK;
wire   [3:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARCACHE;
wire   [2:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARPROT;
wire   [3:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARQOS;
wire   [3:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARREGION;
wire   [0:0] grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARUSER;
wire    grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_RREADY;
wire    grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_BREADY;
reg    grp_writemem5_Pipeline_1_fu_95_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire  signed [63:0] p_cast_cast_i_fu_225_p1;
wire   [31:0] trunc_ln8_cast_i_cast_fu_235_p1;
reg    ap_block_state10;
wire   [9:0] tmp_fu_105_p3;
wire  signed [12:0] sext_ln19_2_fu_112_p1;
wire  signed [10:0] sext_ln18_fu_120_p1;
wire   [13:0] zext_ln19_fu_116_p1;
wire   [13:0] zext_ln18_fu_123_p1;
wire   [13:0] sub_ln19_fu_127_p2;
wire   [13:0] sub_ln19_1_fu_141_p2;
wire   [11:0] trunc_ln19_1_fu_147_p4;
wire  signed [12:0] sext_ln19_fu_157_p1;
wire   [11:0] trunc_ln19_2_fu_167_p4;
wire   [0:0] tmp_1_fu_133_p3;
wire   [12:0] sub_ln19_2_fu_161_p2;
wire  signed [12:0] sext_ln19_1_fu_177_p1;
wire   [33:0] shl_ln8_fu_195_p3;
wire   [63:0] zext_ln8_fu_203_p1;
wire   [63:0] add_ln8_fu_207_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 grp_writemem5_Pipeline_1_fu_95_ap_start_reg = 1'b0;
end

stream2mem_writemem5_Pipeline_1 grp_writemem5_Pipeline_1_fu_95(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_writemem5_Pipeline_1_fu_95_ap_start),
    .ap_done(grp_writemem5_Pipeline_1_fu_95_ap_done),
    .ap_idle(grp_writemem5_Pipeline_1_fu_95_ap_idle),
    .ap_ready(grp_writemem5_Pipeline_1_fu_95_ap_ready),
    .cacheBuff_i_dout(cacheBuff_i_dout),
    .cacheBuff_i_num_data_valid(10'd0),
    .cacheBuff_i_fifo_cap(10'd0),
    .cacheBuff_i_empty_n(cacheBuff_i_empty_n),
    .cacheBuff_i_read(grp_writemem5_Pipeline_1_fu_95_cacheBuff_i_read),
    .m_axi_gmem_AWVALID(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(m_axi_gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(m_axi_gmem_WREADY),
    .m_axi_gmem_WDATA(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(32'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(m_axi_gmem_BVALID),
    .m_axi_gmem_BREADY(grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(m_axi_gmem_BRESP),
    .m_axi_gmem_BID(m_axi_gmem_BID),
    .m_axi_gmem_BUSER(m_axi_gmem_BUSER),
    .p_cast_cast_i(p_cast_i_reg_260),
    .zext_ln8_1(empty_reg_266)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((m_axi_gmem_BVALID == 1'b0) & (icmp_ln6_reg_256 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_writemem5_Pipeline_1_fu_95_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_writemem5_Pipeline_1_fu_95_ap_start_reg <= 1'b1;
        end else if ((grp_writemem5_Pipeline_1_fu_95_ap_ready == 1'b1)) begin
            grp_writemem5_Pipeline_1_fu_95_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_reg_266 <= empty_fu_222_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln6_reg_256 <= icmp_ln6_fu_189_p2;
        select_ln8_reg_250 <= select_ln8_fu_181_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((pMemPort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (img_cols_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_read_reg_244 <= img_cols_dout;
        pMemPort_1_reg_239 <= pMemPort_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_189_p2 == 1'd1))) begin
        p_cast_i_reg_260 <= {{add_ln8_fu_207_p2[63:2]}};
    end
end

always @ (*) begin
    if (((m_axi_gmem_BVALID == 1'b0) & (icmp_ln6_reg_256 == 1'd1))) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if (((pMemPort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (img_cols_empty_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_writemem5_Pipeline_1_fu_95_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((~((m_axi_gmem_BVALID == 1'b0) & (icmp_ln6_reg_256 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_BVALID == 1'b0) & (icmp_ln6_reg_256 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cacheBuff_i_read = grp_writemem5_Pipeline_1_fu_95_cacheBuff_i_read;
    end else begin
        cacheBuff_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln6_reg_256 == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_blk_n = img_cols_empty_n;
    end else begin
        img_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pMemPort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (img_cols_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_read = 1'b1;
    end else begin
        img_cols_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_AWADDR = p_cast_cast_i_fu_225_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWADDR = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWADDR;
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWBURST = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWBURST;
    end else begin
        m_axi_gmem_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWCACHE = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWCACHE;
    end else begin
        m_axi_gmem_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWID = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWID;
    end else begin
        m_axi_gmem_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_AWLEN = trunc_ln8_cast_i_cast_fu_235_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWLEN = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLEN;
    end else begin
        m_axi_gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWLOCK = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWLOCK;
    end else begin
        m_axi_gmem_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWPROT = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWPROT;
    end else begin
        m_axi_gmem_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWQOS = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWQOS;
    end else begin
        m_axi_gmem_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWREGION = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWREGION;
    end else begin
        m_axi_gmem_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWSIZE = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWSIZE;
    end else begin
        m_axi_gmem_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWUSER = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWUSER;
    end else begin
        m_axi_gmem_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_AWVALID = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_AWVALID;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_BVALID == 1'b0) & (icmp_ln6_reg_256 == 1'd1)) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln6_reg_256 == 1'd1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_BREADY = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_BREADY;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_gmem_WVALID = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WVALID;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pMemPort_blk_n = pMemPort_empty_n;
    end else begin
        pMemPort_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pMemPort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (img_cols_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pMemPort_read = 1'b1;
    end else begin
        pMemPort_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((pMemPort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (img_cols_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_189_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_writemem5_Pipeline_1_fu_95_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((m_axi_gmem_BVALID == 1'b0) & (icmp_ln6_reg_256 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln8_fu_207_p2 = (pMemPort_1_reg_239 + zext_ln8_fu_203_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((pMemPort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (img_cols_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln6_reg_256 == 1'd1));
end

assign empty_fu_222_p1 = select_ln8_reg_250[11:0];

assign grp_writemem5_Pipeline_1_fu_95_ap_start = grp_writemem5_Pipeline_1_fu_95_ap_start_reg;

assign icmp_ln6_fu_189_p2 = (($signed(select_ln8_fu_181_p3) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WDATA;

assign m_axi_gmem_WID = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WID;

assign m_axi_gmem_WLAST = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WLAST;

assign m_axi_gmem_WSTRB = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WSTRB;

assign m_axi_gmem_WUSER = grp_writemem5_Pipeline_1_fu_95_m_axi_gmem_WUSER;

assign p_cast_cast_i_fu_225_p1 = $signed(p_cast_i_reg_260);

assign select_ln8_fu_181_p3 = ((tmp_1_fu_133_p3[0:0] == 1'b1) ? sub_ln19_2_fu_161_p2 : sext_ln19_1_fu_177_p1);

assign sext_ln18_fu_120_p1 = img_cols_read_reg_244;

assign sext_ln19_1_fu_177_p1 = $signed(trunc_ln19_2_fu_167_p4);

assign sext_ln19_2_fu_112_p1 = $signed(tmp_fu_105_p3);

assign sext_ln19_fu_157_p1 = $signed(trunc_ln19_1_fu_147_p4);

assign shl_ln8_fu_195_p3 = {{p_read}, {2'd0}};

assign sub_ln19_1_fu_141_p2 = (14'd0 - sub_ln19_fu_127_p2);

assign sub_ln19_2_fu_161_p2 = ($signed(13'd0) - $signed(sext_ln19_fu_157_p1));

assign sub_ln19_fu_127_p2 = (zext_ln19_fu_116_p1 - zext_ln18_fu_123_p1);

assign tmp_1_fu_133_p3 = sub_ln19_fu_127_p2[32'd13];

assign tmp_fu_105_p3 = {{img_cols_read_reg_244}, {2'd0}};

assign trunc_ln19_1_fu_147_p4 = {{sub_ln19_1_fu_141_p2[13:2]}};

assign trunc_ln19_2_fu_167_p4 = {{sub_ln19_fu_127_p2[13:2]}};

assign trunc_ln8_cast_i_cast_fu_235_p1 = select_ln8_reg_250;

assign zext_ln18_fu_123_p1 = $unsigned(sext_ln18_fu_120_p1);

assign zext_ln19_fu_116_p1 = $unsigned(sext_ln19_2_fu_112_p1);

assign zext_ln8_fu_203_p1 = shl_ln8_fu_195_p3;

endmodule //stream2mem_writemem5

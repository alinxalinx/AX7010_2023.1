-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r : IN STD_LOGIC_VECTOR (31 downto 0);
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    row : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    img_cols_c_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_cols_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_cols_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_cols_c_full_n : IN STD_LOGIC;
    img_cols_c_write : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of stream2mem_dataflow_in_loop_VITIS_LOOP_25_1_1_Block_for_inc69_proc4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_cols_c_blk_n : STD_LOGIC;
    signal select_ln19_fu_203_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln19_reg_300 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln40_fu_113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln40_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln40_fu_113_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_117_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln19_fu_125_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln18_fu_133_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln18_fu_133_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln19_fu_129_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln18_fu_137_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln19_fu_141_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln19_1_fu_155_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln19_3_fu_161_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln19_3_fu_171_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln19_1_fu_175_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln19_4_fu_185_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln19_4_fu_195_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_147_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln19_2_fu_179_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln19_2_fu_199_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_215_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln21_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_fu_237_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_fu_251_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln22_1_fu_255_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln22_fu_259_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln1_fu_281_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln40_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal mul_ln40_fu_113_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component stream2mem_mul_31s_11ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_31s_11ns_32_1_1_U57 : component stream2mem_mul_31s_11ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln19_reg_300,
        din1 => mul_ln40_fu_113_p1,
        dout => mul_ln40_fu_113_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln40_reg_310 <= mul_ln40_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (img_cols_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                select_ln19_reg_300 <= select_ln19_fu_203_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_cols_c_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (img_cols_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln21_fu_231_p2 <= std_logic_vector(unsigned(index) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, img_cols_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (img_cols_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, img_cols_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (img_cols_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(mul_ln40_reg_310) + unsigned(sext_ln40_fu_291_p1));
    baseAddr_address0 <= zext_ln40_fu_267_p1(2 - 1 downto 0);

    baseAddr_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            baseAddr_ce0 <= ap_const_logic_1;
        else 
            baseAddr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln21_fu_225_p2 <= "1" when (signed(tmp_fu_215_p4) < signed(ap_const_lv31_1)) else "0";
    icmp_ln22_fu_245_p2 <= "1" when (select_ln21_fu_237_p3 = r) else "0";

    img_cols_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_c_blk_n <= img_cols_c_full_n;
        else 
            img_cols_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_cols_c_din <= p_read;

    img_cols_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_cols_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (img_cols_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_c_write <= ap_const_logic_1;
        else 
            img_cols_c_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln40_fu_113_p1 <= mul_ln40_fu_113_p10(11 - 1 downto 0);
    mul_ln40_fu_113_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row),32));
    select_ln19_fu_203_p3 <= 
        sub_ln19_2_fu_179_p2 when (tmp_3_fu_147_p3(0) = '1') else 
        zext_ln19_2_fu_199_p1;
    select_ln21_fu_237_p3 <= 
        add_ln21_fu_231_p2 when (icmp_ln21_fu_225_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln22_fu_259_p3 <= 
        trunc_ln22_fu_251_p1 when (icmp_ln22_fu_245_p2(0) = '1') else 
        trunc_ln22_1_fu_255_p1;
    sext_ln18_fu_133_p0 <= p_read;
        sext_ln18_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln18_fu_133_p0),11));

        sext_ln19_3_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_3_fu_161_p4),30));

        sext_ln19_4_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_4_fu_185_p4),30));

        sext_ln19_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_117_p3),13));

        sext_ln40_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_281_p4),32));

    sub_ln19_1_fu_155_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(sub_ln19_fu_141_p2));
    sub_ln19_2_fu_179_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln19_1_fu_175_p1));
    sub_ln19_fu_141_p2 <= std_logic_vector(unsigned(zext_ln19_fu_129_p1) - unsigned(zext_ln18_fu_137_p1));
    tmp_2_fu_117_p1 <= p_read;
    tmp_2_fu_117_p3 <= (tmp_2_fu_117_p1 & ap_const_lv2_0);
    tmp_3_fu_147_p3 <= sub_ln19_fu_141_p2(13 downto 13);
    tmp_fu_215_p4 <= index(31 downto 1);
    trunc_ln19_3_fu_161_p4 <= sub_ln19_1_fu_155_p2(13 downto 2);
    trunc_ln19_4_fu_185_p4 <= sub_ln19_fu_141_p2(13 downto 2);
    trunc_ln1_fu_281_p4 <= baseAddr_q0(31 downto 2);
    trunc_ln22_1_fu_255_p1 <= select_ln21_fu_237_p3(2 - 1 downto 0);
    trunc_ln22_fu_251_p1 <= index(2 - 1 downto 0);
    zext_ln18_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_fu_133_p1),14));
    zext_ln19_1_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_3_fu_171_p1),31));
    zext_ln19_2_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_4_fu_195_p1),31));
    zext_ln19_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_fu_125_p1),14));
    zext_ln40_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_259_p3),64));
end behav;

-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_focus_xFGradientX3x3_0_0_s is
port (
    ap_ready : OUT STD_LOGIC;
    t0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    t2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    m0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    m2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    b2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sobel_focus_xFGradientX3x3_0_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal M00_fu_70_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal M01_fu_82_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln61_1_fu_98_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln61_fu_94_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal A00_fu_102_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_1_fu_116_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_fu_112_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal S00_fu_120_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln60_fu_90_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln59_fu_78_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_pix_5_fu_130_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln66_fu_136_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_2_fu_126_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_6_fu_140_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln61_2_fu_108_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln67_fu_146_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln69_1_fu_156_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_pix_fu_150_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_176_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_168_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln72_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln72_fu_198_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln69_fu_162_p2 : STD_LOGIC_VECTOR (7 downto 0);


begin



    A00_fu_102_p2 <= std_logic_vector(unsigned(zext_ln61_1_fu_98_p1) + unsigned(zext_ln61_fu_94_p1));
    M00_fu_70_p3 <= (m0_val & ap_const_lv1_0);
    M01_fu_82_p3 <= (m2_val & ap_const_lv1_0);
    S00_fu_120_p2 <= std_logic_vector(unsigned(zext_ln62_1_fu_116_p1) + unsigned(zext_ln62_fu_112_p1));
    add_ln69_1_fu_156_p2 <= std_logic_vector(unsigned(trunc_ln67_fu_146_p1) + unsigned(t2_val));
    add_ln69_fu_162_p2 <= std_logic_vector(unsigned(add_ln69_1_fu_156_p2) + unsigned(b2_val));
    ap_ready <= ap_const_logic_1;
    ap_return <= 
        select_ln72_fu_198_p3 when (or_ln72_fu_206_p2(0) = '1') else 
        add_ln69_fu_162_p2;
    icmp_ln74_fu_186_p2 <= "1" when (signed(tmp_2_fu_176_p4) > signed(ap_const_lv3_0)) else "0";
    or_ln72_fu_206_p2 <= (tmp_fu_168_p3 or icmp_ln74_fu_186_p2);
    out_pix_5_fu_130_p2 <= std_logic_vector(unsigned(zext_ln60_fu_90_p1) - unsigned(zext_ln59_fu_78_p1));
    out_pix_6_fu_140_p2 <= std_logic_vector(signed(sext_ln66_fu_136_p1) - signed(zext_ln62_2_fu_126_p1));
    out_pix_fu_150_p2 <= std_logic_vector(unsigned(out_pix_6_fu_140_p2) + unsigned(zext_ln61_2_fu_108_p1));
    select_ln72_fu_198_p3 <= 
        ap_const_lv8_FF when (xor_ln72_fu_192_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln66_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_pix_5_fu_130_p2),11));

    tmp_2_fu_176_p4 <= out_pix_fu_150_p2(10 downto 8);
    tmp_fu_168_p3 <= out_pix_fu_150_p2(10 downto 10);
    trunc_ln67_fu_146_p1 <= out_pix_6_fu_140_p2(8 - 1 downto 0);
    xor_ln72_fu_192_p2 <= (tmp_fu_168_p3 xor ap_const_lv1_1);
    zext_ln59_fu_78_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M00_fu_70_p3),10));
    zext_ln60_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M01_fu_82_p3),10));
    zext_ln61_1_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b2_val),9));
    zext_ln61_2_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A00_fu_102_p2),11));
    zext_ln61_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_val),9));
    zext_ln62_1_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b0_val),9));
    zext_ln62_2_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S00_fu_120_p2),11));
    zext_ln62_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t0_val),9));
end behav;

// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_focus_sum_of_stream_1080_1920_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        sobelImg_data_dout,
        sobelImg_data_num_data_valid,
        sobelImg_data_fifo_cap,
        sobelImg_data_empty_n,
        sobelImg_data_read,
        average,
        average_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] sobelImg_data_dout;
input  [1:0] sobelImg_data_num_data_valid;
input  [1:0] sobelImg_data_fifo_cap;
input   sobelImg_data_empty_n;
output   sobelImg_data_read;
output  [31:0] average;
output   average_ap_vld;

reg ap_idle;
reg sobelImg_data_read;
reg[31:0] average;
reg average_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln21_reg_128;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln21_fu_74_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    sobelImg_data_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [28:0] sum_1_fu_40;
wire   [28:0] sum_fu_103_p2;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [28:0] ap_sig_allocacmp_sum_2;
reg   [20:0] indvar_flatten_fu_44;
wire   [20:0] add_ln21_fu_80_p2;
reg   [20:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [31:0] zext_ln19_fu_94_p1;
reg   [31:0] average_preg;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] zext_ln27_fu_99_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_98;
reg    ap_condition_85;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 average_preg = 32'd0;
end

sobel_focus_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                average_preg[0] <= 1'b0;
        average_preg[1] <= 1'b0;
        average_preg[2] <= 1'b0;
        average_preg[3] <= 1'b0;
        average_preg[4] <= 1'b0;
        average_preg[5] <= 1'b0;
        average_preg[6] <= 1'b0;
        average_preg[7] <= 1'b0;
        average_preg[8] <= 1'b0;
        average_preg[9] <= 1'b0;
        average_preg[10] <= 1'b0;
        average_preg[11] <= 1'b0;
        average_preg[12] <= 1'b0;
        average_preg[13] <= 1'b0;
        average_preg[14] <= 1'b0;
        average_preg[15] <= 1'b0;
        average_preg[16] <= 1'b0;
        average_preg[17] <= 1'b0;
        average_preg[18] <= 1'b0;
        average_preg[19] <= 1'b0;
        average_preg[20] <= 1'b0;
        average_preg[21] <= 1'b0;
        average_preg[22] <= 1'b0;
        average_preg[23] <= 1'b0;
        average_preg[24] <= 1'b0;
        average_preg[25] <= 1'b0;
        average_preg[26] <= 1'b0;
        average_preg[27] <= 1'b0;
        average_preg[28] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (icmp_ln21_reg_128 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        average_preg[28 : 0] <= zext_ln19_fu_94_p1[28 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_98)) begin
        if ((icmp_ln21_fu_74_p2 == 1'd0)) begin
            indvar_flatten_fu_44 <= add_ln21_fu_80_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_44 <= 21'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_85)) begin
        if ((icmp_ln21_reg_128 == 1'd0)) begin
            sum_1_fu_40 <= sum_fu_103_p2;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            sum_1_fu_40 <= 29'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln21_reg_128 <= icmp_ln21_fu_74_p2;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_74_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 21'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_44;
    end
end

always @ (*) begin
    if (((ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_sum_2 = 29'd0;
    end else begin
        ap_sig_allocacmp_sum_2 = sum_1_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (icmp_ln21_reg_128 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        average = zext_ln19_fu_94_p1;
    end else begin
        average = average_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_reg_128 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        average_ap_vld = 1'b1;
    end else begin
        average_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln21_reg_128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sobelImg_data_blk_n = sobelImg_data_empty_n;
    end else begin
        sobelImg_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_reg_128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sobelImg_data_read = 1'b1;
    end else begin
        sobelImg_data_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_80_p2 = (ap_sig_allocacmp_indvar_flatten_load + 21'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((icmp_ln21_reg_128 == 1'd0) & (sobelImg_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((icmp_ln21_reg_128 == 1'd0) & (sobelImg_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((icmp_ln21_reg_128 == 1'd0) & (sobelImg_data_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln21_reg_128 == 1'd0) & (sobelImg_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_85 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_98 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln21_fu_74_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 21'd2073600) ? 1'b1 : 1'b0);

assign sum_fu_103_p2 = (zext_ln27_fu_99_p1 + ap_sig_allocacmp_sum_2);

assign zext_ln19_fu_94_p1 = ap_sig_allocacmp_sum_2;

assign zext_ln27_fu_99_p1 = sobelImg_data_dout;

always @ (posedge ap_clk) begin
    average_preg[31:29] <= 3'b000;
end

endmodule //sobel_focus_sum_of_stream_1080_1920_s

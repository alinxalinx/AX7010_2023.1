// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_focus_AXIvideo2xfMat_24_16_1080_1920_1_2_Pipeline_loop_col_zxi2mat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_TVALID,
        srcImg_data_din,
        srcImg_data_num_data_valid,
        srcImg_data_fifo_cap,
        srcImg_data_full_n,
        srcImg_data_write,
        start_2,
        axi_data_2,
        axi_last_2,
        src_TDATA,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        last_out,
        last_out_ap_vld,
        axi_data_5_out,
        axi_data_5_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   src_TVALID;
output  [23:0] srcImg_data_din;
input  [1:0] srcImg_data_num_data_valid;
input  [1:0] srcImg_data_fifo_cap;
input   srcImg_data_full_n;
output   srcImg_data_write;
input  [0:0] start_2;
input  [23:0] axi_data_2;
input  [0:0] axi_last_2;
input  [23:0] src_TDATA;
output   src_TREADY;
input  [2:0] src_TKEEP;
input  [2:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [0:0] last_out;
output   last_out_ap_vld;
output  [23:0] axi_data_5_out;
output   axi_data_5_out_ap_vld;

reg ap_idle;
reg srcImg_data_write;
reg src_TREADY;
reg last_out_ap_vld;
reg axi_data_5_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln133_fu_185_p2;
wire   [0:0] or_ln139_fu_197_p2;
reg    ap_predicate_op35_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln133_reg_259;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    srcImg_data_blk_n;
wire    ap_block_pp0_stage0;
reg    src_TDATA_blk_n;
reg   [0:0] last_reg_145;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_phi_mux_last_phi_fu_148_p4;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_start_phi_fu_159_p4;
reg   [10:0] j_fu_76;
wire   [10:0] j_4_fu_191_p2;
reg   [10:0] ap_sig_allocacmp_j_3;
reg   [0:0] axi_last_fu_80;
reg   [23:0] axi_data_fu_84;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_217;
reg    ap_condition_220;
reg    ap_condition_225;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sobel_focus_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_220)) begin
            axi_data_fu_84 <= src_TDATA;
        end else if ((ap_loop_init == 1'b1)) begin
            axi_data_fu_84 <= axi_data_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_220)) begin
            axi_last_fu_80 <= src_TLAST;
        end else if ((ap_loop_init == 1'b1)) begin
            axi_last_fu_80 <= axi_last_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln133_fu_185_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            j_fu_76 <= j_4_fu_191_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_76 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            last_reg_145 <= 1'd0;
        end else if ((1'b1 == ap_condition_225)) begin
            last_reg_145 <= axi_last_fu_80;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln133_reg_259 <= icmp_ln133_fu_185_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln133_fu_185_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_last_phi_fu_148_p4 = 1'd0;
        end else if ((1'b1 == ap_condition_217)) begin
            ap_phi_mux_last_phi_fu_148_p4 = axi_last_fu_80;
        end else begin
            ap_phi_mux_last_phi_fu_148_p4 = last_reg_145;
        end
    end else begin
        ap_phi_mux_last_phi_fu_148_p4 = last_reg_145;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_start_phi_fu_159_p4 = start_2;
        end else if ((1'b1 == ap_condition_217)) begin
            ap_phi_mux_start_phi_fu_159_p4 = 1'd0;
        end else begin
            ap_phi_mux_start_phi_fu_159_p4 = start_2;
        end
    end else begin
        ap_phi_mux_start_phi_fu_159_p4 = start_2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_3 = 11'd0;
    end else begin
        ap_sig_allocacmp_j_3 = j_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln133_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_data_5_out_ap_vld = 1'b1;
    end else begin
        axi_data_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln133_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_out_ap_vld = 1'b1;
    end else begin
        last_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln133_reg_259 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_data_blk_n = srcImg_data_full_n;
    end else begin
        srcImg_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln133_reg_259 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_data_write = 1'b1;
    end else begin
        srcImg_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op35_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TDATA_blk_n = src_TVALID;
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op35_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TREADY = 1'b1;
    end else begin
        src_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln133_reg_259 == 1'd0) & (srcImg_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op35_read_state1 == 1'b1) & (src_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln133_reg_259 == 1'd0) & (srcImg_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op35_read_state1 == 1'b1) & (src_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln133_reg_259 == 1'd0) & (srcImg_data_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op35_read_state1 == 1'b1) & (src_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_predicate_op35_read_state1 == 1'b1) & (src_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln133_reg_259 == 1'd0) & (srcImg_data_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_217 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln133_reg_259 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_220 = ((or_ln139_fu_197_p2 == 1'd0) & (icmp_ln133_fu_185_p2 == 1'd0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_condition_225 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln133_reg_259 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op35_read_state1 = ((or_ln139_fu_197_p2 == 1'd0) & (icmp_ln133_fu_185_p2 == 1'd0));
end

assign axi_data_5_out = axi_data_fu_84;

assign icmp_ln133_fu_185_p2 = ((ap_sig_allocacmp_j_3 == 11'd1920) ? 1'b1 : 1'b0);

assign j_4_fu_191_p2 = (ap_sig_allocacmp_j_3 + 11'd1);

assign last_out = last_reg_145;

assign or_ln139_fu_197_p2 = (ap_phi_mux_start_phi_fu_159_p4 | ap_phi_mux_last_phi_fu_148_p4);

assign srcImg_data_din = axi_data_fu_84;

endmodule //sobel_focus_AXIvideo2xfMat_24_16_1080_1920_1_2_Pipeline_loop_col_zxi2mat

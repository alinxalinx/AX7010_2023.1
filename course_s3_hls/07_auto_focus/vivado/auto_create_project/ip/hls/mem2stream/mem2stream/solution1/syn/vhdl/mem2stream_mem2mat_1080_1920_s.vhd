-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem2stream_mem2mat_1080_1920_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    img_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_data_full_n : IN STD_LOGIC;
    img_data_write : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    pMemPort : IN STD_LOGIC_VECTOR (63 downto 0);
    baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    baseAddr_ce0 : OUT STD_LOGIC;
    baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w : IN STD_LOGIC_VECTOR (31 downto 0);
    indexr : OUT STD_LOGIC_VECTOR (31 downto 0);
    indexr_ap_vld : OUT STD_LOGIC;
    img_rows_c_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    img_rows_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_rows_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_rows_c_full_n : IN STD_LOGIC;
    img_rows_c_write : OUT STD_LOGIC;
    img_cols_c_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_cols_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    img_cols_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    img_cols_c_full_n : IN STD_LOGIC;
    img_cols_c_write : OUT STD_LOGIC );
end;


architecture behav of mem2stream_mem2mat_1080_1920_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal index : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    signal img_rows_c_blk_n : STD_LOGIC;
    signal img_cols_c_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_dataflow_parent_loop_proc_fu_131_baseAddr_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_baseAddr_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_baseAddr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_baseAddr_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_img_data_din : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_131_img_data_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_ap_continue : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_131_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_done : STD_LOGIC := '0';
    signal select_ln35_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexr_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tmp_fu_154_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln34_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_176_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln35_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mem2stream_dataflow_parent_loop_proc IS
    port (
        local_rows : IN STD_LOGIC_VECTOR (10 downto 0);
        baseAddr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        baseAddr_ce0 : OUT STD_LOGIC;
        baseAddr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        baseAddr_we0 : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        pMemPort : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        img_data_full_n : IN STD_LOGIC;
        img_data_write : OUT STD_LOGIC;
        index : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        pMemPort_ap_vld : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        p_read1_ap_vld : IN STD_LOGIC;
        index_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_dataflow_parent_loop_proc_fu_131 : component mem2stream_dataflow_parent_loop_proc
    port map (
        local_rows => p_read,
        baseAddr_address0 => grp_dataflow_parent_loop_proc_fu_131_baseAddr_address0,
        baseAddr_ce0 => grp_dataflow_parent_loop_proc_fu_131_baseAddr_ce0,
        baseAddr_d0 => grp_dataflow_parent_loop_proc_fu_131_baseAddr_d0,
        baseAddr_q0 => baseAddr_q0,
        baseAddr_we0 => grp_dataflow_parent_loop_proc_fu_131_baseAddr_we0,
        m_axi_gmem_AWVALID => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        pMemPort => pMemPort,
        p_read => p_read,
        p_read1 => p_read1,
        img_data_din => grp_dataflow_parent_loop_proc_fu_131_img_data_din,
        img_data_full_n => img_data_full_n,
        img_data_write => grp_dataflow_parent_loop_proc_fu_131_img_data_write,
        index => index,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        pMemPort_ap_vld => ap_const_logic_1,
        p_read_ap_vld => ap_const_logic_1,
        p_read1_ap_vld => ap_const_logic_1,
        index_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_proc_fu_131_ap_start,
        ap_done => grp_dataflow_parent_loop_proc_fu_131_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc_fu_131_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc_fu_131_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc_fu_131_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_131_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_131_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc_fu_131_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_proc_fu_131_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_dataflow_parent_loop_proc_fu_131_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc_fu_131_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc_fu_131_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indexr_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                indexr_preg <= ap_const_lv32_0;
            else
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    indexr_preg <= select_ln35_fu_190_p3;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                index <= select_ln35_fu_190_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_rows_c_full_n, img_cols_c_full_n, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln34_fu_170_p2 <= std_logic_vector(unsigned(index) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, img_rows_c_full_n, img_cols_c_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, img_rows_c_full_n, img_cols_c_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_ready, ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_ready and ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_done <= (grp_dataflow_parent_loop_proc_fu_131_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc_fu_131_ap_ready <= (grp_dataflow_parent_loop_proc_fu_131_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_131_ap_ready);
    baseAddr_address0 <= grp_dataflow_parent_loop_proc_fu_131_baseAddr_address0;
    baseAddr_ce0 <= grp_dataflow_parent_loop_proc_fu_131_baseAddr_ce0;

    grp_dataflow_parent_loop_proc_fu_131_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_dataflow_parent_loop_proc_fu_131_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc_fu_131_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc_fu_131_ap_start <= grp_dataflow_parent_loop_proc_fu_131_ap_start_reg;
    icmp_ln34_fu_164_p2 <= "1" when (signed(tmp_fu_154_p4) < signed(ap_const_lv31_1)) else "0";
    icmp_ln35_fu_184_p2 <= "1" when (n_fu_176_p3 = w) else "0";

    img_cols_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_c_blk_n <= img_cols_c_full_n;
        else 
            img_cols_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_cols_c_din <= p_read1;

    img_cols_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_c_full_n, img_cols_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_c_write <= ap_const_logic_1;
        else 
            img_cols_c_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_din <= grp_dataflow_parent_loop_proc_fu_131_img_data_din;

    img_data_write_assign_proc : process(grp_dataflow_parent_loop_proc_fu_131_img_data_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_data_write <= grp_dataflow_parent_loop_proc_fu_131_img_data_write;
        else 
            img_data_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_c_blk_n <= img_rows_c_full_n;
        else 
            img_rows_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_rows_c_din <= p_read;

    img_rows_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_c_full_n, img_cols_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_c_write <= ap_const_logic_1;
        else 
            img_rows_c_write <= ap_const_logic_0;
        end if; 
    end process;


    indexr_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_c_full_n, img_cols_c_full_n, select_ln35_fu_190_p3, indexr_preg)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            indexr <= select_ln35_fu_190_p3;
        else 
            indexr <= indexr_preg;
        end if; 
    end process;


    indexr_ap_vld_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_c_full_n, img_cols_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (img_cols_c_full_n = ap_const_logic_0) or (img_rows_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            indexr_ap_vld <= ap_const_logic_1;
        else 
            indexr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_ARADDR <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARUSER;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_ARVALID <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_state2, grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_RREADY <= grp_dataflow_parent_loop_proc_fu_131_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    n_fu_176_p3 <= 
        add_ln34_fu_170_p2 when (icmp_ln34_fu_164_p2(0) = '1') else 
        ap_const_lv32_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln35_fu_190_p3 <= 
        index when (icmp_ln35_fu_184_p2(0) = '1') else 
        n_fu_176_p3;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_154_p4 <= index(31 downto 1);
end behav;
